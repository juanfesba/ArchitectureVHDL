-- Quartus II VHDL Template
-- Single port RAM with single read/write address 

library ieee;
use ieee.std_logic_1164.all;

entity RAM is

generic 
(
DATA_WIDTH : natural := 25;
ADDR_WIDTH : natural := 3
);

port 
(
clk : in std_logic;
addr : in natural range 0 to 2**ADDR_WIDTH - 1;
data : in std_logic_vector((DATA_WIDTH-1) downto 0);
we : in std_logic := '1';
q : out std_logic_vector((DATA_WIDTH -1) downto 0)
);

end entity;

architecture rtl of RAM is

-- Build a 2-D array type for the RAM
subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;

-- Declare the RAM signal. 
signal ram : memory_t:= (
0  => "0000000000000000000000000", --negro   000000
1  => "0000000000000000000000001", --morado oscuro     5838B8
2  => "0000000000000000000000010", --rojo       FF0000
3  => "0000000000000000000000100", --naranja oscuro      BF4000
4  => "0000000000000000000001000", --naranja
5  => "0000000000000000000010000", --azul
6  => "0000000000000000000100000", --cyan
7  => "0000000000000000001000000"
);

-- Register to hold the address 
signal addr_reg : natural range 0 to 2**ADDR_WIDTH-1;

begin

process(clk)
begin
if(rising_edge(clk)) then
if(we = '1') then
ram(addr) <= data;
end if;

-- Register the address for reading
addr_reg <= addr;
end if;
end process;

q <= ram(addr_reg);

end rtl;