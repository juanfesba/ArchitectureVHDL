// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2017 02:53:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DATAPATH
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DATAPATH_vlg_sample_tst(
	Clk,
	IControl,
	IPushB0,
	IPushB1,
	IPushB2,
	IRunOrWalk,
	ISensor0,
	ResetClock,
	Switch0,
	Switch1,
	Switch2,
	Switch3,
	Switch4,
	Switch5,
	Switch6,
	Switch7,
	sampler_tx
);
input  Clk;
input  IControl;
input  IPushB0;
input  IPushB1;
input  IPushB2;
input  IRunOrWalk;
input  ISensor0;
input  ResetClock;
input  Switch0;
input  Switch1;
input  Switch2;
input  Switch3;
input  Switch4;
input  Switch5;
input  Switch6;
input  Switch7;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or IControl or IPushB0 or IPushB1 or IPushB2 or IRunOrWalk or ISensor0 or ResetClock or Switch0 or Switch1 or Switch2 or Switch3 or Switch4 or Switch5 or Switch6 or Switch7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DATAPATH_vlg_check_tst (
	DIRMEMORIA,
	RegistroAA,
	RegistroBB,
	SalidaMUXMDR,
	sieteS0,
	sieteS1,
	sieteS2,
	sieteS3,
	SIR,
	SPCOUTT,
	sampler_rx
);
input [24:0] DIRMEMORIA;
input [24:0] RegistroAA;
input [24:0] RegistroBB;
input [24:0] SalidaMUXMDR;
input [6:0] sieteS0;
input [6:0] sieteS1;
input [6:0] sieteS2;
input [6:0] sieteS3;
input [24:0] SIR;
input [24:0] SPCOUTT;
input sampler_rx;

reg [24:0] DIRMEMORIA_expected;
reg [24:0] RegistroAA_expected;
reg [24:0] RegistroBB_expected;
reg [24:0] SalidaMUXMDR_expected;
reg [6:0] sieteS0_expected;
reg [6:0] sieteS1_expected;
reg [6:0] sieteS2_expected;
reg [6:0] sieteS3_expected;
reg [24:0] SIR_expected;
reg [24:0] SPCOUTT_expected;

reg [24:0] DIRMEMORIA_prev;
reg [24:0] RegistroAA_prev;
reg [24:0] RegistroBB_prev;
reg [24:0] SalidaMUXMDR_prev;
reg [6:0] sieteS0_prev;
reg [6:0] sieteS1_prev;
reg [6:0] sieteS2_prev;
reg [6:0] sieteS3_prev;
reg [24:0] SIR_prev;
reg [24:0] SPCOUTT_prev;

reg [24:0] DIRMEMORIA_expected_prev;
reg [24:0] RegistroAA_expected_prev;
reg [24:0] RegistroBB_expected_prev;
reg [24:0] SalidaMUXMDR_expected_prev;
reg [6:0] sieteS0_expected_prev;
reg [6:0] sieteS1_expected_prev;
reg [6:0] sieteS2_expected_prev;
reg [6:0] sieteS3_expected_prev;
reg [24:0] SIR_expected_prev;
reg [24:0] SPCOUTT_expected_prev;

reg [24:0] last_DIRMEMORIA_exp;
reg [24:0] last_RegistroAA_exp;
reg [24:0] last_RegistroBB_exp;
reg [24:0] last_SalidaMUXMDR_exp;
reg [6:0] last_sieteS0_exp;
reg [6:0] last_sieteS1_exp;
reg [6:0] last_sieteS2_exp;
reg [6:0] last_sieteS3_exp;
reg [24:0] last_SIR_exp;
reg [24:0] last_SPCOUTT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	DIRMEMORIA_prev = DIRMEMORIA;
	RegistroAA_prev = RegistroAA;
	RegistroBB_prev = RegistroBB;
	SalidaMUXMDR_prev = SalidaMUXMDR;
	sieteS0_prev = sieteS0;
	sieteS1_prev = sieteS1;
	sieteS2_prev = sieteS2;
	sieteS3_prev = sieteS3;
	SIR_prev = SIR;
	SPCOUTT_prev = SPCOUTT;
end

// update expected /o prevs

always @(trigger)
begin
	DIRMEMORIA_expected_prev = DIRMEMORIA_expected;
	RegistroAA_expected_prev = RegistroAA_expected;
	RegistroBB_expected_prev = RegistroBB_expected;
	SalidaMUXMDR_expected_prev = SalidaMUXMDR_expected;
	sieteS0_expected_prev = sieteS0_expected;
	sieteS1_expected_prev = sieteS1_expected;
	sieteS2_expected_prev = sieteS2_expected;
	sieteS3_expected_prev = sieteS3_expected;
	SIR_expected_prev = SIR_expected;
	SPCOUTT_expected_prev = SPCOUTT_expected;
end


// expected DIRMEMORIA[ 24 ]
initial
begin
	DIRMEMORIA_expected[24] = 1'bX;
end 
// expected DIRMEMORIA[ 23 ]
initial
begin
	DIRMEMORIA_expected[23] = 1'bX;
end 
// expected DIRMEMORIA[ 22 ]
initial
begin
	DIRMEMORIA_expected[22] = 1'bX;
end 
// expected DIRMEMORIA[ 21 ]
initial
begin
	DIRMEMORIA_expected[21] = 1'bX;
end 
// expected DIRMEMORIA[ 20 ]
initial
begin
	DIRMEMORIA_expected[20] = 1'bX;
end 
// expected DIRMEMORIA[ 19 ]
initial
begin
	DIRMEMORIA_expected[19] = 1'bX;
end 
// expected DIRMEMORIA[ 18 ]
initial
begin
	DIRMEMORIA_expected[18] = 1'bX;
end 
// expected DIRMEMORIA[ 17 ]
initial
begin
	DIRMEMORIA_expected[17] = 1'bX;
end 
// expected DIRMEMORIA[ 16 ]
initial
begin
	DIRMEMORIA_expected[16] = 1'bX;
end 
// expected DIRMEMORIA[ 15 ]
initial
begin
	DIRMEMORIA_expected[15] = 1'bX;
end 
// expected DIRMEMORIA[ 14 ]
initial
begin
	DIRMEMORIA_expected[14] = 1'bX;
end 
// expected DIRMEMORIA[ 13 ]
initial
begin
	DIRMEMORIA_expected[13] = 1'bX;
end 
// expected DIRMEMORIA[ 12 ]
initial
begin
	DIRMEMORIA_expected[12] = 1'bX;
end 
// expected DIRMEMORIA[ 11 ]
initial
begin
	DIRMEMORIA_expected[11] = 1'bX;
end 
// expected DIRMEMORIA[ 10 ]
initial
begin
	DIRMEMORIA_expected[10] = 1'bX;
end 
// expected DIRMEMORIA[ 9 ]
initial
begin
	DIRMEMORIA_expected[9] = 1'bX;
end 
// expected DIRMEMORIA[ 8 ]
initial
begin
	DIRMEMORIA_expected[8] = 1'bX;
end 
// expected DIRMEMORIA[ 7 ]
initial
begin
	DIRMEMORIA_expected[7] = 1'bX;
end 
// expected DIRMEMORIA[ 6 ]
initial
begin
	DIRMEMORIA_expected[6] = 1'bX;
end 
// expected DIRMEMORIA[ 5 ]
initial
begin
	DIRMEMORIA_expected[5] = 1'bX;
end 
// expected DIRMEMORIA[ 4 ]
initial
begin
	DIRMEMORIA_expected[4] = 1'bX;
end 
// expected DIRMEMORIA[ 3 ]
initial
begin
	DIRMEMORIA_expected[3] = 1'bX;
end 
// expected DIRMEMORIA[ 2 ]
initial
begin
	DIRMEMORIA_expected[2] = 1'bX;
end 
// expected DIRMEMORIA[ 1 ]
initial
begin
	DIRMEMORIA_expected[1] = 1'bX;
end 
// expected DIRMEMORIA[ 0 ]
initial
begin
	DIRMEMORIA_expected[0] = 1'bX;
end 
// expected RegistroAA[ 24 ]
initial
begin
	RegistroAA_expected[24] = 1'bX;
end 
// expected RegistroAA[ 23 ]
initial
begin
	RegistroAA_expected[23] = 1'bX;
end 
// expected RegistroAA[ 22 ]
initial
begin
	RegistroAA_expected[22] = 1'bX;
end 
// expected RegistroAA[ 21 ]
initial
begin
	RegistroAA_expected[21] = 1'bX;
end 
// expected RegistroAA[ 20 ]
initial
begin
	RegistroAA_expected[20] = 1'bX;
end 
// expected RegistroAA[ 19 ]
initial
begin
	RegistroAA_expected[19] = 1'bX;
end 
// expected RegistroAA[ 18 ]
initial
begin
	RegistroAA_expected[18] = 1'bX;
end 
// expected RegistroAA[ 17 ]
initial
begin
	RegistroAA_expected[17] = 1'bX;
end 
// expected RegistroAA[ 16 ]
initial
begin
	RegistroAA_expected[16] = 1'bX;
end 
// expected RegistroAA[ 15 ]
initial
begin
	RegistroAA_expected[15] = 1'bX;
end 
// expected RegistroAA[ 14 ]
initial
begin
	RegistroAA_expected[14] = 1'bX;
end 
// expected RegistroAA[ 13 ]
initial
begin
	RegistroAA_expected[13] = 1'bX;
end 
// expected RegistroAA[ 12 ]
initial
begin
	RegistroAA_expected[12] = 1'bX;
end 
// expected RegistroAA[ 11 ]
initial
begin
	RegistroAA_expected[11] = 1'bX;
end 
// expected RegistroAA[ 10 ]
initial
begin
	RegistroAA_expected[10] = 1'bX;
end 
// expected RegistroAA[ 9 ]
initial
begin
	RegistroAA_expected[9] = 1'bX;
end 
// expected RegistroAA[ 8 ]
initial
begin
	RegistroAA_expected[8] = 1'bX;
end 
// expected RegistroAA[ 7 ]
initial
begin
	RegistroAA_expected[7] = 1'bX;
end 
// expected RegistroAA[ 6 ]
initial
begin
	RegistroAA_expected[6] = 1'bX;
end 
// expected RegistroAA[ 5 ]
initial
begin
	RegistroAA_expected[5] = 1'bX;
end 
// expected RegistroAA[ 4 ]
initial
begin
	RegistroAA_expected[4] = 1'bX;
end 
// expected RegistroAA[ 3 ]
initial
begin
	RegistroAA_expected[3] = 1'bX;
end 
// expected RegistroAA[ 2 ]
initial
begin
	RegistroAA_expected[2] = 1'bX;
end 
// expected RegistroAA[ 1 ]
initial
begin
	RegistroAA_expected[1] = 1'bX;
end 
// expected RegistroAA[ 0 ]
initial
begin
	RegistroAA_expected[0] = 1'bX;
end 
// expected RegistroBB[ 24 ]
initial
begin
	RegistroBB_expected[24] = 1'bX;
end 
// expected RegistroBB[ 23 ]
initial
begin
	RegistroBB_expected[23] = 1'bX;
end 
// expected RegistroBB[ 22 ]
initial
begin
	RegistroBB_expected[22] = 1'bX;
end 
// expected RegistroBB[ 21 ]
initial
begin
	RegistroBB_expected[21] = 1'bX;
end 
// expected RegistroBB[ 20 ]
initial
begin
	RegistroBB_expected[20] = 1'bX;
end 
// expected RegistroBB[ 19 ]
initial
begin
	RegistroBB_expected[19] = 1'bX;
end 
// expected RegistroBB[ 18 ]
initial
begin
	RegistroBB_expected[18] = 1'bX;
end 
// expected RegistroBB[ 17 ]
initial
begin
	RegistroBB_expected[17] = 1'bX;
end 
// expected RegistroBB[ 16 ]
initial
begin
	RegistroBB_expected[16] = 1'bX;
end 
// expected RegistroBB[ 15 ]
initial
begin
	RegistroBB_expected[15] = 1'bX;
end 
// expected RegistroBB[ 14 ]
initial
begin
	RegistroBB_expected[14] = 1'bX;
end 
// expected RegistroBB[ 13 ]
initial
begin
	RegistroBB_expected[13] = 1'bX;
end 
// expected RegistroBB[ 12 ]
initial
begin
	RegistroBB_expected[12] = 1'bX;
end 
// expected RegistroBB[ 11 ]
initial
begin
	RegistroBB_expected[11] = 1'bX;
end 
// expected RegistroBB[ 10 ]
initial
begin
	RegistroBB_expected[10] = 1'bX;
end 
// expected RegistroBB[ 9 ]
initial
begin
	RegistroBB_expected[9] = 1'bX;
end 
// expected RegistroBB[ 8 ]
initial
begin
	RegistroBB_expected[8] = 1'bX;
end 
// expected RegistroBB[ 7 ]
initial
begin
	RegistroBB_expected[7] = 1'bX;
end 
// expected RegistroBB[ 6 ]
initial
begin
	RegistroBB_expected[6] = 1'bX;
end 
// expected RegistroBB[ 5 ]
initial
begin
	RegistroBB_expected[5] = 1'bX;
end 
// expected RegistroBB[ 4 ]
initial
begin
	RegistroBB_expected[4] = 1'bX;
end 
// expected RegistroBB[ 3 ]
initial
begin
	RegistroBB_expected[3] = 1'bX;
end 
// expected RegistroBB[ 2 ]
initial
begin
	RegistroBB_expected[2] = 1'bX;
end 
// expected RegistroBB[ 1 ]
initial
begin
	RegistroBB_expected[1] = 1'bX;
end 
// expected RegistroBB[ 0 ]
initial
begin
	RegistroBB_expected[0] = 1'bX;
end 
// expected SalidaMUXMDR[ 24 ]
initial
begin
	SalidaMUXMDR_expected[24] = 1'bX;
end 
// expected SalidaMUXMDR[ 23 ]
initial
begin
	SalidaMUXMDR_expected[23] = 1'bX;
end 
// expected SalidaMUXMDR[ 22 ]
initial
begin
	SalidaMUXMDR_expected[22] = 1'bX;
end 
// expected SalidaMUXMDR[ 21 ]
initial
begin
	SalidaMUXMDR_expected[21] = 1'bX;
end 
// expected SalidaMUXMDR[ 20 ]
initial
begin
	SalidaMUXMDR_expected[20] = 1'bX;
end 
// expected SalidaMUXMDR[ 19 ]
initial
begin
	SalidaMUXMDR_expected[19] = 1'bX;
end 
// expected SalidaMUXMDR[ 18 ]
initial
begin
	SalidaMUXMDR_expected[18] = 1'bX;
end 
// expected SalidaMUXMDR[ 17 ]
initial
begin
	SalidaMUXMDR_expected[17] = 1'bX;
end 
// expected SalidaMUXMDR[ 16 ]
initial
begin
	SalidaMUXMDR_expected[16] = 1'bX;
end 
// expected SalidaMUXMDR[ 15 ]
initial
begin
	SalidaMUXMDR_expected[15] = 1'bX;
end 
// expected SalidaMUXMDR[ 14 ]
initial
begin
	SalidaMUXMDR_expected[14] = 1'bX;
end 
// expected SalidaMUXMDR[ 13 ]
initial
begin
	SalidaMUXMDR_expected[13] = 1'bX;
end 
// expected SalidaMUXMDR[ 12 ]
initial
begin
	SalidaMUXMDR_expected[12] = 1'bX;
end 
// expected SalidaMUXMDR[ 11 ]
initial
begin
	SalidaMUXMDR_expected[11] = 1'bX;
end 
// expected SalidaMUXMDR[ 10 ]
initial
begin
	SalidaMUXMDR_expected[10] = 1'bX;
end 
// expected SalidaMUXMDR[ 9 ]
initial
begin
	SalidaMUXMDR_expected[9] = 1'bX;
end 
// expected SalidaMUXMDR[ 8 ]
initial
begin
	SalidaMUXMDR_expected[8] = 1'bX;
end 
// expected SalidaMUXMDR[ 7 ]
initial
begin
	SalidaMUXMDR_expected[7] = 1'bX;
end 
// expected SalidaMUXMDR[ 6 ]
initial
begin
	SalidaMUXMDR_expected[6] = 1'bX;
end 
// expected SalidaMUXMDR[ 5 ]
initial
begin
	SalidaMUXMDR_expected[5] = 1'bX;
end 
// expected SalidaMUXMDR[ 4 ]
initial
begin
	SalidaMUXMDR_expected[4] = 1'bX;
end 
// expected SalidaMUXMDR[ 3 ]
initial
begin
	SalidaMUXMDR_expected[3] = 1'bX;
end 
// expected SalidaMUXMDR[ 2 ]
initial
begin
	SalidaMUXMDR_expected[2] = 1'bX;
end 
// expected SalidaMUXMDR[ 1 ]
initial
begin
	SalidaMUXMDR_expected[1] = 1'bX;
end 
// expected SalidaMUXMDR[ 0 ]
initial
begin
	SalidaMUXMDR_expected[0] = 1'bX;
end 
// expected sieteS0[ 6 ]
initial
begin
	sieteS0_expected[6] = 1'bX;
end 
// expected sieteS0[ 5 ]
initial
begin
	sieteS0_expected[5] = 1'bX;
end 
// expected sieteS0[ 4 ]
initial
begin
	sieteS0_expected[4] = 1'bX;
end 
// expected sieteS0[ 3 ]
initial
begin
	sieteS0_expected[3] = 1'bX;
end 
// expected sieteS0[ 2 ]
initial
begin
	sieteS0_expected[2] = 1'bX;
end 
// expected sieteS0[ 1 ]
initial
begin
	sieteS0_expected[1] = 1'bX;
end 
// expected sieteS0[ 0 ]
initial
begin
	sieteS0_expected[0] = 1'bX;
end 
// expected sieteS1[ 6 ]
initial
begin
	sieteS1_expected[6] = 1'bX;
end 
// expected sieteS1[ 5 ]
initial
begin
	sieteS1_expected[5] = 1'bX;
end 
// expected sieteS1[ 4 ]
initial
begin
	sieteS1_expected[4] = 1'bX;
end 
// expected sieteS1[ 3 ]
initial
begin
	sieteS1_expected[3] = 1'bX;
end 
// expected sieteS1[ 2 ]
initial
begin
	sieteS1_expected[2] = 1'bX;
end 
// expected sieteS1[ 1 ]
initial
begin
	sieteS1_expected[1] = 1'bX;
end 
// expected sieteS1[ 0 ]
initial
begin
	sieteS1_expected[0] = 1'bX;
end 
// expected sieteS2[ 6 ]
initial
begin
	sieteS2_expected[6] = 1'bX;
end 
// expected sieteS2[ 5 ]
initial
begin
	sieteS2_expected[5] = 1'bX;
end 
// expected sieteS2[ 4 ]
initial
begin
	sieteS2_expected[4] = 1'bX;
end 
// expected sieteS2[ 3 ]
initial
begin
	sieteS2_expected[3] = 1'bX;
end 
// expected sieteS2[ 2 ]
initial
begin
	sieteS2_expected[2] = 1'bX;
end 
// expected sieteS2[ 1 ]
initial
begin
	sieteS2_expected[1] = 1'bX;
end 
// expected sieteS2[ 0 ]
initial
begin
	sieteS2_expected[0] = 1'bX;
end 
// expected sieteS3[ 6 ]
initial
begin
	sieteS3_expected[6] = 1'bX;
end 
// expected sieteS3[ 5 ]
initial
begin
	sieteS3_expected[5] = 1'bX;
end 
// expected sieteS3[ 4 ]
initial
begin
	sieteS3_expected[4] = 1'bX;
end 
// expected sieteS3[ 3 ]
initial
begin
	sieteS3_expected[3] = 1'bX;
end 
// expected sieteS3[ 2 ]
initial
begin
	sieteS3_expected[2] = 1'bX;
end 
// expected sieteS3[ 1 ]
initial
begin
	sieteS3_expected[1] = 1'bX;
end 
// expected sieteS3[ 0 ]
initial
begin
	sieteS3_expected[0] = 1'bX;
end 
// expected SIR[ 24 ]
initial
begin
	SIR_expected[24] = 1'bX;
end 
// expected SIR[ 23 ]
initial
begin
	SIR_expected[23] = 1'bX;
end 
// expected SIR[ 22 ]
initial
begin
	SIR_expected[22] = 1'bX;
end 
// expected SIR[ 21 ]
initial
begin
	SIR_expected[21] = 1'bX;
end 
// expected SIR[ 20 ]
initial
begin
	SIR_expected[20] = 1'bX;
end 
// expected SIR[ 19 ]
initial
begin
	SIR_expected[19] = 1'bX;
end 
// expected SIR[ 18 ]
initial
begin
	SIR_expected[18] = 1'bX;
end 
// expected SIR[ 17 ]
initial
begin
	SIR_expected[17] = 1'bX;
end 
// expected SIR[ 16 ]
initial
begin
	SIR_expected[16] = 1'bX;
end 
// expected SIR[ 15 ]
initial
begin
	SIR_expected[15] = 1'bX;
end 
// expected SIR[ 14 ]
initial
begin
	SIR_expected[14] = 1'bX;
end 
// expected SIR[ 13 ]
initial
begin
	SIR_expected[13] = 1'bX;
end 
// expected SIR[ 12 ]
initial
begin
	SIR_expected[12] = 1'bX;
end 
// expected SIR[ 11 ]
initial
begin
	SIR_expected[11] = 1'bX;
end 
// expected SIR[ 10 ]
initial
begin
	SIR_expected[10] = 1'bX;
end 
// expected SIR[ 9 ]
initial
begin
	SIR_expected[9] = 1'bX;
end 
// expected SIR[ 8 ]
initial
begin
	SIR_expected[8] = 1'bX;
end 
// expected SIR[ 7 ]
initial
begin
	SIR_expected[7] = 1'bX;
end 
// expected SIR[ 6 ]
initial
begin
	SIR_expected[6] = 1'bX;
end 
// expected SIR[ 5 ]
initial
begin
	SIR_expected[5] = 1'bX;
end 
// expected SIR[ 4 ]
initial
begin
	SIR_expected[4] = 1'bX;
end 
// expected SIR[ 3 ]
initial
begin
	SIR_expected[3] = 1'bX;
end 
// expected SIR[ 2 ]
initial
begin
	SIR_expected[2] = 1'bX;
end 
// expected SIR[ 1 ]
initial
begin
	SIR_expected[1] = 1'bX;
end 
// expected SIR[ 0 ]
initial
begin
	SIR_expected[0] = 1'bX;
end 
// expected SPCOUTT[ 24 ]
initial
begin
	SPCOUTT_expected[24] = 1'bX;
end 
// expected SPCOUTT[ 23 ]
initial
begin
	SPCOUTT_expected[23] = 1'bX;
end 
// expected SPCOUTT[ 22 ]
initial
begin
	SPCOUTT_expected[22] = 1'bX;
end 
// expected SPCOUTT[ 21 ]
initial
begin
	SPCOUTT_expected[21] = 1'bX;
end 
// expected SPCOUTT[ 20 ]
initial
begin
	SPCOUTT_expected[20] = 1'bX;
end 
// expected SPCOUTT[ 19 ]
initial
begin
	SPCOUTT_expected[19] = 1'bX;
end 
// expected SPCOUTT[ 18 ]
initial
begin
	SPCOUTT_expected[18] = 1'bX;
end 
// expected SPCOUTT[ 17 ]
initial
begin
	SPCOUTT_expected[17] = 1'bX;
end 
// expected SPCOUTT[ 16 ]
initial
begin
	SPCOUTT_expected[16] = 1'bX;
end 
// expected SPCOUTT[ 15 ]
initial
begin
	SPCOUTT_expected[15] = 1'bX;
end 
// expected SPCOUTT[ 14 ]
initial
begin
	SPCOUTT_expected[14] = 1'bX;
end 
// expected SPCOUTT[ 13 ]
initial
begin
	SPCOUTT_expected[13] = 1'bX;
end 
// expected SPCOUTT[ 12 ]
initial
begin
	SPCOUTT_expected[12] = 1'bX;
end 
// expected SPCOUTT[ 11 ]
initial
begin
	SPCOUTT_expected[11] = 1'bX;
end 
// expected SPCOUTT[ 10 ]
initial
begin
	SPCOUTT_expected[10] = 1'bX;
end 
// expected SPCOUTT[ 9 ]
initial
begin
	SPCOUTT_expected[9] = 1'bX;
end 
// expected SPCOUTT[ 8 ]
initial
begin
	SPCOUTT_expected[8] = 1'bX;
end 
// expected SPCOUTT[ 7 ]
initial
begin
	SPCOUTT_expected[7] = 1'bX;
end 
// expected SPCOUTT[ 6 ]
initial
begin
	SPCOUTT_expected[6] = 1'bX;
end 
// expected SPCOUTT[ 5 ]
initial
begin
	SPCOUTT_expected[5] = 1'bX;
end 
// expected SPCOUTT[ 4 ]
initial
begin
	SPCOUTT_expected[4] = 1'bX;
end 
// expected SPCOUTT[ 3 ]
initial
begin
	SPCOUTT_expected[3] = 1'bX;
end 
// expected SPCOUTT[ 2 ]
initial
begin
	SPCOUTT_expected[2] = 1'bX;
end 
// expected SPCOUTT[ 1 ]
initial
begin
	SPCOUTT_expected[1] = 1'bX;
end 
// expected SPCOUTT[ 0 ]
initial
begin
	SPCOUTT_expected[0] = 1'bX;
end 
// generate trigger
always @(DIRMEMORIA_expected or DIRMEMORIA or RegistroAA_expected or RegistroAA or RegistroBB_expected or RegistroBB or SalidaMUXMDR_expected or SalidaMUXMDR or sieteS0_expected or sieteS0 or sieteS1_expected or sieteS1 or sieteS2_expected or sieteS2 or sieteS3_expected or sieteS3 or SIR_expected or SIR or SPCOUTT_expected or SPCOUTT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DIRMEMORIA = %b | expected RegistroAA = %b | expected RegistroBB = %b | expected SalidaMUXMDR = %b | expected sieteS0 = %b | expected sieteS1 = %b | expected sieteS2 = %b | expected sieteS3 = %b | expected SIR = %b | expected SPCOUTT = %b | ",DIRMEMORIA_expected_prev,RegistroAA_expected_prev,RegistroBB_expected_prev,SalidaMUXMDR_expected_prev,sieteS0_expected_prev,sieteS1_expected_prev,sieteS2_expected_prev,sieteS3_expected_prev,SIR_expected_prev,SPCOUTT_expected_prev);
	$display("| real DIRMEMORIA = %b | real RegistroAA = %b | real RegistroBB = %b | real SalidaMUXMDR = %b | real sieteS0 = %b | real sieteS1 = %b | real sieteS2 = %b | real sieteS3 = %b | real SIR = %b | real SPCOUTT = %b | ",DIRMEMORIA_prev,RegistroAA_prev,RegistroBB_prev,SalidaMUXMDR_prev,sieteS0_prev,sieteS1_prev,sieteS2_prev,sieteS3_prev,SIR_prev,SPCOUTT_prev);
`endif
	if (
		( DIRMEMORIA_expected_prev[0] !== 1'bx ) && ( DIRMEMORIA_prev[0] !== DIRMEMORIA_expected_prev[0] )
		&& ((DIRMEMORIA_expected_prev[0] !== last_DIRMEMORIA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[0] = DIRMEMORIA_expected_prev[0];
	end
	if (
		( DIRMEMORIA_expected_prev[1] !== 1'bx ) && ( DIRMEMORIA_prev[1] !== DIRMEMORIA_expected_prev[1] )
		&& ((DIRMEMORIA_expected_prev[1] !== last_DIRMEMORIA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[1] = DIRMEMORIA_expected_prev[1];
	end
	if (
		( DIRMEMORIA_expected_prev[2] !== 1'bx ) && ( DIRMEMORIA_prev[2] !== DIRMEMORIA_expected_prev[2] )
		&& ((DIRMEMORIA_expected_prev[2] !== last_DIRMEMORIA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[2] = DIRMEMORIA_expected_prev[2];
	end
	if (
		( DIRMEMORIA_expected_prev[3] !== 1'bx ) && ( DIRMEMORIA_prev[3] !== DIRMEMORIA_expected_prev[3] )
		&& ((DIRMEMORIA_expected_prev[3] !== last_DIRMEMORIA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[3] = DIRMEMORIA_expected_prev[3];
	end
	if (
		( DIRMEMORIA_expected_prev[4] !== 1'bx ) && ( DIRMEMORIA_prev[4] !== DIRMEMORIA_expected_prev[4] )
		&& ((DIRMEMORIA_expected_prev[4] !== last_DIRMEMORIA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[4] = DIRMEMORIA_expected_prev[4];
	end
	if (
		( DIRMEMORIA_expected_prev[5] !== 1'bx ) && ( DIRMEMORIA_prev[5] !== DIRMEMORIA_expected_prev[5] )
		&& ((DIRMEMORIA_expected_prev[5] !== last_DIRMEMORIA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[5] = DIRMEMORIA_expected_prev[5];
	end
	if (
		( DIRMEMORIA_expected_prev[6] !== 1'bx ) && ( DIRMEMORIA_prev[6] !== DIRMEMORIA_expected_prev[6] )
		&& ((DIRMEMORIA_expected_prev[6] !== last_DIRMEMORIA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[6] = DIRMEMORIA_expected_prev[6];
	end
	if (
		( DIRMEMORIA_expected_prev[7] !== 1'bx ) && ( DIRMEMORIA_prev[7] !== DIRMEMORIA_expected_prev[7] )
		&& ((DIRMEMORIA_expected_prev[7] !== last_DIRMEMORIA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[7] = DIRMEMORIA_expected_prev[7];
	end
	if (
		( DIRMEMORIA_expected_prev[8] !== 1'bx ) && ( DIRMEMORIA_prev[8] !== DIRMEMORIA_expected_prev[8] )
		&& ((DIRMEMORIA_expected_prev[8] !== last_DIRMEMORIA_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[8] = DIRMEMORIA_expected_prev[8];
	end
	if (
		( DIRMEMORIA_expected_prev[9] !== 1'bx ) && ( DIRMEMORIA_prev[9] !== DIRMEMORIA_expected_prev[9] )
		&& ((DIRMEMORIA_expected_prev[9] !== last_DIRMEMORIA_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[9] = DIRMEMORIA_expected_prev[9];
	end
	if (
		( DIRMEMORIA_expected_prev[10] !== 1'bx ) && ( DIRMEMORIA_prev[10] !== DIRMEMORIA_expected_prev[10] )
		&& ((DIRMEMORIA_expected_prev[10] !== last_DIRMEMORIA_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[10] = DIRMEMORIA_expected_prev[10];
	end
	if (
		( DIRMEMORIA_expected_prev[11] !== 1'bx ) && ( DIRMEMORIA_prev[11] !== DIRMEMORIA_expected_prev[11] )
		&& ((DIRMEMORIA_expected_prev[11] !== last_DIRMEMORIA_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[11] = DIRMEMORIA_expected_prev[11];
	end
	if (
		( DIRMEMORIA_expected_prev[12] !== 1'bx ) && ( DIRMEMORIA_prev[12] !== DIRMEMORIA_expected_prev[12] )
		&& ((DIRMEMORIA_expected_prev[12] !== last_DIRMEMORIA_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[12] = DIRMEMORIA_expected_prev[12];
	end
	if (
		( DIRMEMORIA_expected_prev[13] !== 1'bx ) && ( DIRMEMORIA_prev[13] !== DIRMEMORIA_expected_prev[13] )
		&& ((DIRMEMORIA_expected_prev[13] !== last_DIRMEMORIA_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[13] = DIRMEMORIA_expected_prev[13];
	end
	if (
		( DIRMEMORIA_expected_prev[14] !== 1'bx ) && ( DIRMEMORIA_prev[14] !== DIRMEMORIA_expected_prev[14] )
		&& ((DIRMEMORIA_expected_prev[14] !== last_DIRMEMORIA_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[14] = DIRMEMORIA_expected_prev[14];
	end
	if (
		( DIRMEMORIA_expected_prev[15] !== 1'bx ) && ( DIRMEMORIA_prev[15] !== DIRMEMORIA_expected_prev[15] )
		&& ((DIRMEMORIA_expected_prev[15] !== last_DIRMEMORIA_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[15] = DIRMEMORIA_expected_prev[15];
	end
	if (
		( DIRMEMORIA_expected_prev[16] !== 1'bx ) && ( DIRMEMORIA_prev[16] !== DIRMEMORIA_expected_prev[16] )
		&& ((DIRMEMORIA_expected_prev[16] !== last_DIRMEMORIA_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[16] = DIRMEMORIA_expected_prev[16];
	end
	if (
		( DIRMEMORIA_expected_prev[17] !== 1'bx ) && ( DIRMEMORIA_prev[17] !== DIRMEMORIA_expected_prev[17] )
		&& ((DIRMEMORIA_expected_prev[17] !== last_DIRMEMORIA_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[17] = DIRMEMORIA_expected_prev[17];
	end
	if (
		( DIRMEMORIA_expected_prev[18] !== 1'bx ) && ( DIRMEMORIA_prev[18] !== DIRMEMORIA_expected_prev[18] )
		&& ((DIRMEMORIA_expected_prev[18] !== last_DIRMEMORIA_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[18] = DIRMEMORIA_expected_prev[18];
	end
	if (
		( DIRMEMORIA_expected_prev[19] !== 1'bx ) && ( DIRMEMORIA_prev[19] !== DIRMEMORIA_expected_prev[19] )
		&& ((DIRMEMORIA_expected_prev[19] !== last_DIRMEMORIA_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[19] = DIRMEMORIA_expected_prev[19];
	end
	if (
		( DIRMEMORIA_expected_prev[20] !== 1'bx ) && ( DIRMEMORIA_prev[20] !== DIRMEMORIA_expected_prev[20] )
		&& ((DIRMEMORIA_expected_prev[20] !== last_DIRMEMORIA_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[20] = DIRMEMORIA_expected_prev[20];
	end
	if (
		( DIRMEMORIA_expected_prev[21] !== 1'bx ) && ( DIRMEMORIA_prev[21] !== DIRMEMORIA_expected_prev[21] )
		&& ((DIRMEMORIA_expected_prev[21] !== last_DIRMEMORIA_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[21] = DIRMEMORIA_expected_prev[21];
	end
	if (
		( DIRMEMORIA_expected_prev[22] !== 1'bx ) && ( DIRMEMORIA_prev[22] !== DIRMEMORIA_expected_prev[22] )
		&& ((DIRMEMORIA_expected_prev[22] !== last_DIRMEMORIA_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[22] = DIRMEMORIA_expected_prev[22];
	end
	if (
		( DIRMEMORIA_expected_prev[23] !== 1'bx ) && ( DIRMEMORIA_prev[23] !== DIRMEMORIA_expected_prev[23] )
		&& ((DIRMEMORIA_expected_prev[23] !== last_DIRMEMORIA_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[23] = DIRMEMORIA_expected_prev[23];
	end
	if (
		( DIRMEMORIA_expected_prev[24] !== 1'bx ) && ( DIRMEMORIA_prev[24] !== DIRMEMORIA_expected_prev[24] )
		&& ((DIRMEMORIA_expected_prev[24] !== last_DIRMEMORIA_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIRMEMORIA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIRMEMORIA_expected_prev);
		$display ("     Real value = %b", DIRMEMORIA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIRMEMORIA_exp[24] = DIRMEMORIA_expected_prev[24];
	end
	if (
		( RegistroAA_expected_prev[0] !== 1'bx ) && ( RegistroAA_prev[0] !== RegistroAA_expected_prev[0] )
		&& ((RegistroAA_expected_prev[0] !== last_RegistroAA_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[0] = RegistroAA_expected_prev[0];
	end
	if (
		( RegistroAA_expected_prev[1] !== 1'bx ) && ( RegistroAA_prev[1] !== RegistroAA_expected_prev[1] )
		&& ((RegistroAA_expected_prev[1] !== last_RegistroAA_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[1] = RegistroAA_expected_prev[1];
	end
	if (
		( RegistroAA_expected_prev[2] !== 1'bx ) && ( RegistroAA_prev[2] !== RegistroAA_expected_prev[2] )
		&& ((RegistroAA_expected_prev[2] !== last_RegistroAA_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[2] = RegistroAA_expected_prev[2];
	end
	if (
		( RegistroAA_expected_prev[3] !== 1'bx ) && ( RegistroAA_prev[3] !== RegistroAA_expected_prev[3] )
		&& ((RegistroAA_expected_prev[3] !== last_RegistroAA_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[3] = RegistroAA_expected_prev[3];
	end
	if (
		( RegistroAA_expected_prev[4] !== 1'bx ) && ( RegistroAA_prev[4] !== RegistroAA_expected_prev[4] )
		&& ((RegistroAA_expected_prev[4] !== last_RegistroAA_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[4] = RegistroAA_expected_prev[4];
	end
	if (
		( RegistroAA_expected_prev[5] !== 1'bx ) && ( RegistroAA_prev[5] !== RegistroAA_expected_prev[5] )
		&& ((RegistroAA_expected_prev[5] !== last_RegistroAA_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[5] = RegistroAA_expected_prev[5];
	end
	if (
		( RegistroAA_expected_prev[6] !== 1'bx ) && ( RegistroAA_prev[6] !== RegistroAA_expected_prev[6] )
		&& ((RegistroAA_expected_prev[6] !== last_RegistroAA_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[6] = RegistroAA_expected_prev[6];
	end
	if (
		( RegistroAA_expected_prev[7] !== 1'bx ) && ( RegistroAA_prev[7] !== RegistroAA_expected_prev[7] )
		&& ((RegistroAA_expected_prev[7] !== last_RegistroAA_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[7] = RegistroAA_expected_prev[7];
	end
	if (
		( RegistroAA_expected_prev[8] !== 1'bx ) && ( RegistroAA_prev[8] !== RegistroAA_expected_prev[8] )
		&& ((RegistroAA_expected_prev[8] !== last_RegistroAA_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[8] = RegistroAA_expected_prev[8];
	end
	if (
		( RegistroAA_expected_prev[9] !== 1'bx ) && ( RegistroAA_prev[9] !== RegistroAA_expected_prev[9] )
		&& ((RegistroAA_expected_prev[9] !== last_RegistroAA_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[9] = RegistroAA_expected_prev[9];
	end
	if (
		( RegistroAA_expected_prev[10] !== 1'bx ) && ( RegistroAA_prev[10] !== RegistroAA_expected_prev[10] )
		&& ((RegistroAA_expected_prev[10] !== last_RegistroAA_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[10] = RegistroAA_expected_prev[10];
	end
	if (
		( RegistroAA_expected_prev[11] !== 1'bx ) && ( RegistroAA_prev[11] !== RegistroAA_expected_prev[11] )
		&& ((RegistroAA_expected_prev[11] !== last_RegistroAA_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[11] = RegistroAA_expected_prev[11];
	end
	if (
		( RegistroAA_expected_prev[12] !== 1'bx ) && ( RegistroAA_prev[12] !== RegistroAA_expected_prev[12] )
		&& ((RegistroAA_expected_prev[12] !== last_RegistroAA_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[12] = RegistroAA_expected_prev[12];
	end
	if (
		( RegistroAA_expected_prev[13] !== 1'bx ) && ( RegistroAA_prev[13] !== RegistroAA_expected_prev[13] )
		&& ((RegistroAA_expected_prev[13] !== last_RegistroAA_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[13] = RegistroAA_expected_prev[13];
	end
	if (
		( RegistroAA_expected_prev[14] !== 1'bx ) && ( RegistroAA_prev[14] !== RegistroAA_expected_prev[14] )
		&& ((RegistroAA_expected_prev[14] !== last_RegistroAA_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[14] = RegistroAA_expected_prev[14];
	end
	if (
		( RegistroAA_expected_prev[15] !== 1'bx ) && ( RegistroAA_prev[15] !== RegistroAA_expected_prev[15] )
		&& ((RegistroAA_expected_prev[15] !== last_RegistroAA_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[15] = RegistroAA_expected_prev[15];
	end
	if (
		( RegistroAA_expected_prev[16] !== 1'bx ) && ( RegistroAA_prev[16] !== RegistroAA_expected_prev[16] )
		&& ((RegistroAA_expected_prev[16] !== last_RegistroAA_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[16] = RegistroAA_expected_prev[16];
	end
	if (
		( RegistroAA_expected_prev[17] !== 1'bx ) && ( RegistroAA_prev[17] !== RegistroAA_expected_prev[17] )
		&& ((RegistroAA_expected_prev[17] !== last_RegistroAA_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[17] = RegistroAA_expected_prev[17];
	end
	if (
		( RegistroAA_expected_prev[18] !== 1'bx ) && ( RegistroAA_prev[18] !== RegistroAA_expected_prev[18] )
		&& ((RegistroAA_expected_prev[18] !== last_RegistroAA_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[18] = RegistroAA_expected_prev[18];
	end
	if (
		( RegistroAA_expected_prev[19] !== 1'bx ) && ( RegistroAA_prev[19] !== RegistroAA_expected_prev[19] )
		&& ((RegistroAA_expected_prev[19] !== last_RegistroAA_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[19] = RegistroAA_expected_prev[19];
	end
	if (
		( RegistroAA_expected_prev[20] !== 1'bx ) && ( RegistroAA_prev[20] !== RegistroAA_expected_prev[20] )
		&& ((RegistroAA_expected_prev[20] !== last_RegistroAA_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[20] = RegistroAA_expected_prev[20];
	end
	if (
		( RegistroAA_expected_prev[21] !== 1'bx ) && ( RegistroAA_prev[21] !== RegistroAA_expected_prev[21] )
		&& ((RegistroAA_expected_prev[21] !== last_RegistroAA_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[21] = RegistroAA_expected_prev[21];
	end
	if (
		( RegistroAA_expected_prev[22] !== 1'bx ) && ( RegistroAA_prev[22] !== RegistroAA_expected_prev[22] )
		&& ((RegistroAA_expected_prev[22] !== last_RegistroAA_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[22] = RegistroAA_expected_prev[22];
	end
	if (
		( RegistroAA_expected_prev[23] !== 1'bx ) && ( RegistroAA_prev[23] !== RegistroAA_expected_prev[23] )
		&& ((RegistroAA_expected_prev[23] !== last_RegistroAA_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[23] = RegistroAA_expected_prev[23];
	end
	if (
		( RegistroAA_expected_prev[24] !== 1'bx ) && ( RegistroAA_prev[24] !== RegistroAA_expected_prev[24] )
		&& ((RegistroAA_expected_prev[24] !== last_RegistroAA_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroAA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroAA_expected_prev);
		$display ("     Real value = %b", RegistroAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RegistroAA_exp[24] = RegistroAA_expected_prev[24];
	end
	if (
		( RegistroBB_expected_prev[0] !== 1'bx ) && ( RegistroBB_prev[0] !== RegistroBB_expected_prev[0] )
		&& ((RegistroBB_expected_prev[0] !== last_RegistroBB_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[0] = RegistroBB_expected_prev[0];
	end
	if (
		( RegistroBB_expected_prev[1] !== 1'bx ) && ( RegistroBB_prev[1] !== RegistroBB_expected_prev[1] )
		&& ((RegistroBB_expected_prev[1] !== last_RegistroBB_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[1] = RegistroBB_expected_prev[1];
	end
	if (
		( RegistroBB_expected_prev[2] !== 1'bx ) && ( RegistroBB_prev[2] !== RegistroBB_expected_prev[2] )
		&& ((RegistroBB_expected_prev[2] !== last_RegistroBB_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[2] = RegistroBB_expected_prev[2];
	end
	if (
		( RegistroBB_expected_prev[3] !== 1'bx ) && ( RegistroBB_prev[3] !== RegistroBB_expected_prev[3] )
		&& ((RegistroBB_expected_prev[3] !== last_RegistroBB_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[3] = RegistroBB_expected_prev[3];
	end
	if (
		( RegistroBB_expected_prev[4] !== 1'bx ) && ( RegistroBB_prev[4] !== RegistroBB_expected_prev[4] )
		&& ((RegistroBB_expected_prev[4] !== last_RegistroBB_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[4] = RegistroBB_expected_prev[4];
	end
	if (
		( RegistroBB_expected_prev[5] !== 1'bx ) && ( RegistroBB_prev[5] !== RegistroBB_expected_prev[5] )
		&& ((RegistroBB_expected_prev[5] !== last_RegistroBB_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[5] = RegistroBB_expected_prev[5];
	end
	if (
		( RegistroBB_expected_prev[6] !== 1'bx ) && ( RegistroBB_prev[6] !== RegistroBB_expected_prev[6] )
		&& ((RegistroBB_expected_prev[6] !== last_RegistroBB_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[6] = RegistroBB_expected_prev[6];
	end
	if (
		( RegistroBB_expected_prev[7] !== 1'bx ) && ( RegistroBB_prev[7] !== RegistroBB_expected_prev[7] )
		&& ((RegistroBB_expected_prev[7] !== last_RegistroBB_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[7] = RegistroBB_expected_prev[7];
	end
	if (
		( RegistroBB_expected_prev[8] !== 1'bx ) && ( RegistroBB_prev[8] !== RegistroBB_expected_prev[8] )
		&& ((RegistroBB_expected_prev[8] !== last_RegistroBB_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[8] = RegistroBB_expected_prev[8];
	end
	if (
		( RegistroBB_expected_prev[9] !== 1'bx ) && ( RegistroBB_prev[9] !== RegistroBB_expected_prev[9] )
		&& ((RegistroBB_expected_prev[9] !== last_RegistroBB_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[9] = RegistroBB_expected_prev[9];
	end
	if (
		( RegistroBB_expected_prev[10] !== 1'bx ) && ( RegistroBB_prev[10] !== RegistroBB_expected_prev[10] )
		&& ((RegistroBB_expected_prev[10] !== last_RegistroBB_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[10] = RegistroBB_expected_prev[10];
	end
	if (
		( RegistroBB_expected_prev[11] !== 1'bx ) && ( RegistroBB_prev[11] !== RegistroBB_expected_prev[11] )
		&& ((RegistroBB_expected_prev[11] !== last_RegistroBB_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[11] = RegistroBB_expected_prev[11];
	end
	if (
		( RegistroBB_expected_prev[12] !== 1'bx ) && ( RegistroBB_prev[12] !== RegistroBB_expected_prev[12] )
		&& ((RegistroBB_expected_prev[12] !== last_RegistroBB_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[12] = RegistroBB_expected_prev[12];
	end
	if (
		( RegistroBB_expected_prev[13] !== 1'bx ) && ( RegistroBB_prev[13] !== RegistroBB_expected_prev[13] )
		&& ((RegistroBB_expected_prev[13] !== last_RegistroBB_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[13] = RegistroBB_expected_prev[13];
	end
	if (
		( RegistroBB_expected_prev[14] !== 1'bx ) && ( RegistroBB_prev[14] !== RegistroBB_expected_prev[14] )
		&& ((RegistroBB_expected_prev[14] !== last_RegistroBB_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[14] = RegistroBB_expected_prev[14];
	end
	if (
		( RegistroBB_expected_prev[15] !== 1'bx ) && ( RegistroBB_prev[15] !== RegistroBB_expected_prev[15] )
		&& ((RegistroBB_expected_prev[15] !== last_RegistroBB_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[15] = RegistroBB_expected_prev[15];
	end
	if (
		( RegistroBB_expected_prev[16] !== 1'bx ) && ( RegistroBB_prev[16] !== RegistroBB_expected_prev[16] )
		&& ((RegistroBB_expected_prev[16] !== last_RegistroBB_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[16] = RegistroBB_expected_prev[16];
	end
	if (
		( RegistroBB_expected_prev[17] !== 1'bx ) && ( RegistroBB_prev[17] !== RegistroBB_expected_prev[17] )
		&& ((RegistroBB_expected_prev[17] !== last_RegistroBB_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[17] = RegistroBB_expected_prev[17];
	end
	if (
		( RegistroBB_expected_prev[18] !== 1'bx ) && ( RegistroBB_prev[18] !== RegistroBB_expected_prev[18] )
		&& ((RegistroBB_expected_prev[18] !== last_RegistroBB_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[18] = RegistroBB_expected_prev[18];
	end
	if (
		( RegistroBB_expected_prev[19] !== 1'bx ) && ( RegistroBB_prev[19] !== RegistroBB_expected_prev[19] )
		&& ((RegistroBB_expected_prev[19] !== last_RegistroBB_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[19] = RegistroBB_expected_prev[19];
	end
	if (
		( RegistroBB_expected_prev[20] !== 1'bx ) && ( RegistroBB_prev[20] !== RegistroBB_expected_prev[20] )
		&& ((RegistroBB_expected_prev[20] !== last_RegistroBB_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[20] = RegistroBB_expected_prev[20];
	end
	if (
		( RegistroBB_expected_prev[21] !== 1'bx ) && ( RegistroBB_prev[21] !== RegistroBB_expected_prev[21] )
		&& ((RegistroBB_expected_prev[21] !== last_RegistroBB_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[21] = RegistroBB_expected_prev[21];
	end
	if (
		( RegistroBB_expected_prev[22] !== 1'bx ) && ( RegistroBB_prev[22] !== RegistroBB_expected_prev[22] )
		&& ((RegistroBB_expected_prev[22] !== last_RegistroBB_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[22] = RegistroBB_expected_prev[22];
	end
	if (
		( RegistroBB_expected_prev[23] !== 1'bx ) && ( RegistroBB_prev[23] !== RegistroBB_expected_prev[23] )
		&& ((RegistroBB_expected_prev[23] !== last_RegistroBB_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[23] = RegistroBB_expected_prev[23];
	end
	if (
		( RegistroBB_expected_prev[24] !== 1'bx ) && ( RegistroBB_prev[24] !== RegistroBB_expected_prev[24] )
		&& ((RegistroBB_expected_prev[24] !== last_RegistroBB_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegistroBB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegistroBB_expected_prev);
		$display ("     Real value = %b", RegistroBB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RegistroBB_exp[24] = RegistroBB_expected_prev[24];
	end
	if (
		( SalidaMUXMDR_expected_prev[0] !== 1'bx ) && ( SalidaMUXMDR_prev[0] !== SalidaMUXMDR_expected_prev[0] )
		&& ((SalidaMUXMDR_expected_prev[0] !== last_SalidaMUXMDR_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[0] = SalidaMUXMDR_expected_prev[0];
	end
	if (
		( SalidaMUXMDR_expected_prev[1] !== 1'bx ) && ( SalidaMUXMDR_prev[1] !== SalidaMUXMDR_expected_prev[1] )
		&& ((SalidaMUXMDR_expected_prev[1] !== last_SalidaMUXMDR_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[1] = SalidaMUXMDR_expected_prev[1];
	end
	if (
		( SalidaMUXMDR_expected_prev[2] !== 1'bx ) && ( SalidaMUXMDR_prev[2] !== SalidaMUXMDR_expected_prev[2] )
		&& ((SalidaMUXMDR_expected_prev[2] !== last_SalidaMUXMDR_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[2] = SalidaMUXMDR_expected_prev[2];
	end
	if (
		( SalidaMUXMDR_expected_prev[3] !== 1'bx ) && ( SalidaMUXMDR_prev[3] !== SalidaMUXMDR_expected_prev[3] )
		&& ((SalidaMUXMDR_expected_prev[3] !== last_SalidaMUXMDR_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[3] = SalidaMUXMDR_expected_prev[3];
	end
	if (
		( SalidaMUXMDR_expected_prev[4] !== 1'bx ) && ( SalidaMUXMDR_prev[4] !== SalidaMUXMDR_expected_prev[4] )
		&& ((SalidaMUXMDR_expected_prev[4] !== last_SalidaMUXMDR_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[4] = SalidaMUXMDR_expected_prev[4];
	end
	if (
		( SalidaMUXMDR_expected_prev[5] !== 1'bx ) && ( SalidaMUXMDR_prev[5] !== SalidaMUXMDR_expected_prev[5] )
		&& ((SalidaMUXMDR_expected_prev[5] !== last_SalidaMUXMDR_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[5] = SalidaMUXMDR_expected_prev[5];
	end
	if (
		( SalidaMUXMDR_expected_prev[6] !== 1'bx ) && ( SalidaMUXMDR_prev[6] !== SalidaMUXMDR_expected_prev[6] )
		&& ((SalidaMUXMDR_expected_prev[6] !== last_SalidaMUXMDR_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[6] = SalidaMUXMDR_expected_prev[6];
	end
	if (
		( SalidaMUXMDR_expected_prev[7] !== 1'bx ) && ( SalidaMUXMDR_prev[7] !== SalidaMUXMDR_expected_prev[7] )
		&& ((SalidaMUXMDR_expected_prev[7] !== last_SalidaMUXMDR_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[7] = SalidaMUXMDR_expected_prev[7];
	end
	if (
		( SalidaMUXMDR_expected_prev[8] !== 1'bx ) && ( SalidaMUXMDR_prev[8] !== SalidaMUXMDR_expected_prev[8] )
		&& ((SalidaMUXMDR_expected_prev[8] !== last_SalidaMUXMDR_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[8] = SalidaMUXMDR_expected_prev[8];
	end
	if (
		( SalidaMUXMDR_expected_prev[9] !== 1'bx ) && ( SalidaMUXMDR_prev[9] !== SalidaMUXMDR_expected_prev[9] )
		&& ((SalidaMUXMDR_expected_prev[9] !== last_SalidaMUXMDR_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[9] = SalidaMUXMDR_expected_prev[9];
	end
	if (
		( SalidaMUXMDR_expected_prev[10] !== 1'bx ) && ( SalidaMUXMDR_prev[10] !== SalidaMUXMDR_expected_prev[10] )
		&& ((SalidaMUXMDR_expected_prev[10] !== last_SalidaMUXMDR_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[10] = SalidaMUXMDR_expected_prev[10];
	end
	if (
		( SalidaMUXMDR_expected_prev[11] !== 1'bx ) && ( SalidaMUXMDR_prev[11] !== SalidaMUXMDR_expected_prev[11] )
		&& ((SalidaMUXMDR_expected_prev[11] !== last_SalidaMUXMDR_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[11] = SalidaMUXMDR_expected_prev[11];
	end
	if (
		( SalidaMUXMDR_expected_prev[12] !== 1'bx ) && ( SalidaMUXMDR_prev[12] !== SalidaMUXMDR_expected_prev[12] )
		&& ((SalidaMUXMDR_expected_prev[12] !== last_SalidaMUXMDR_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[12] = SalidaMUXMDR_expected_prev[12];
	end
	if (
		( SalidaMUXMDR_expected_prev[13] !== 1'bx ) && ( SalidaMUXMDR_prev[13] !== SalidaMUXMDR_expected_prev[13] )
		&& ((SalidaMUXMDR_expected_prev[13] !== last_SalidaMUXMDR_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[13] = SalidaMUXMDR_expected_prev[13];
	end
	if (
		( SalidaMUXMDR_expected_prev[14] !== 1'bx ) && ( SalidaMUXMDR_prev[14] !== SalidaMUXMDR_expected_prev[14] )
		&& ((SalidaMUXMDR_expected_prev[14] !== last_SalidaMUXMDR_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[14] = SalidaMUXMDR_expected_prev[14];
	end
	if (
		( SalidaMUXMDR_expected_prev[15] !== 1'bx ) && ( SalidaMUXMDR_prev[15] !== SalidaMUXMDR_expected_prev[15] )
		&& ((SalidaMUXMDR_expected_prev[15] !== last_SalidaMUXMDR_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[15] = SalidaMUXMDR_expected_prev[15];
	end
	if (
		( SalidaMUXMDR_expected_prev[16] !== 1'bx ) && ( SalidaMUXMDR_prev[16] !== SalidaMUXMDR_expected_prev[16] )
		&& ((SalidaMUXMDR_expected_prev[16] !== last_SalidaMUXMDR_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[16] = SalidaMUXMDR_expected_prev[16];
	end
	if (
		( SalidaMUXMDR_expected_prev[17] !== 1'bx ) && ( SalidaMUXMDR_prev[17] !== SalidaMUXMDR_expected_prev[17] )
		&& ((SalidaMUXMDR_expected_prev[17] !== last_SalidaMUXMDR_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[17] = SalidaMUXMDR_expected_prev[17];
	end
	if (
		( SalidaMUXMDR_expected_prev[18] !== 1'bx ) && ( SalidaMUXMDR_prev[18] !== SalidaMUXMDR_expected_prev[18] )
		&& ((SalidaMUXMDR_expected_prev[18] !== last_SalidaMUXMDR_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[18] = SalidaMUXMDR_expected_prev[18];
	end
	if (
		( SalidaMUXMDR_expected_prev[19] !== 1'bx ) && ( SalidaMUXMDR_prev[19] !== SalidaMUXMDR_expected_prev[19] )
		&& ((SalidaMUXMDR_expected_prev[19] !== last_SalidaMUXMDR_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[19] = SalidaMUXMDR_expected_prev[19];
	end
	if (
		( SalidaMUXMDR_expected_prev[20] !== 1'bx ) && ( SalidaMUXMDR_prev[20] !== SalidaMUXMDR_expected_prev[20] )
		&& ((SalidaMUXMDR_expected_prev[20] !== last_SalidaMUXMDR_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[20] = SalidaMUXMDR_expected_prev[20];
	end
	if (
		( SalidaMUXMDR_expected_prev[21] !== 1'bx ) && ( SalidaMUXMDR_prev[21] !== SalidaMUXMDR_expected_prev[21] )
		&& ((SalidaMUXMDR_expected_prev[21] !== last_SalidaMUXMDR_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[21] = SalidaMUXMDR_expected_prev[21];
	end
	if (
		( SalidaMUXMDR_expected_prev[22] !== 1'bx ) && ( SalidaMUXMDR_prev[22] !== SalidaMUXMDR_expected_prev[22] )
		&& ((SalidaMUXMDR_expected_prev[22] !== last_SalidaMUXMDR_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[22] = SalidaMUXMDR_expected_prev[22];
	end
	if (
		( SalidaMUXMDR_expected_prev[23] !== 1'bx ) && ( SalidaMUXMDR_prev[23] !== SalidaMUXMDR_expected_prev[23] )
		&& ((SalidaMUXMDR_expected_prev[23] !== last_SalidaMUXMDR_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[23] = SalidaMUXMDR_expected_prev[23];
	end
	if (
		( SalidaMUXMDR_expected_prev[24] !== 1'bx ) && ( SalidaMUXMDR_prev[24] !== SalidaMUXMDR_expected_prev[24] )
		&& ((SalidaMUXMDR_expected_prev[24] !== last_SalidaMUXMDR_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaMUXMDR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaMUXMDR_expected_prev);
		$display ("     Real value = %b", SalidaMUXMDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalidaMUXMDR_exp[24] = SalidaMUXMDR_expected_prev[24];
	end
	if (
		( sieteS0_expected_prev[0] !== 1'bx ) && ( sieteS0_prev[0] !== sieteS0_expected_prev[0] )
		&& ((sieteS0_expected_prev[0] !== last_sieteS0_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS0_expected_prev);
		$display ("     Real value = %b", sieteS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sieteS0_exp[0] = sieteS0_expected_prev[0];
	end
	if (
		( sieteS0_expected_prev[1] !== 1'bx ) && ( sieteS0_prev[1] !== sieteS0_expected_prev[1] )
		&& ((sieteS0_expected_prev[1] !== last_sieteS0_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS0_expected_prev);
		$display ("     Real value = %b", sieteS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sieteS0_exp[1] = sieteS0_expected_prev[1];
	end
	if (
		( sieteS0_expected_prev[2] !== 1'bx ) && ( sieteS0_prev[2] !== sieteS0_expected_prev[2] )
		&& ((sieteS0_expected_prev[2] !== last_sieteS0_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS0_expected_prev);
		$display ("     Real value = %b", sieteS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sieteS0_exp[2] = sieteS0_expected_prev[2];
	end
	if (
		( sieteS0_expected_prev[3] !== 1'bx ) && ( sieteS0_prev[3] !== sieteS0_expected_prev[3] )
		&& ((sieteS0_expected_prev[3] !== last_sieteS0_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS0_expected_prev);
		$display ("     Real value = %b", sieteS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sieteS0_exp[3] = sieteS0_expected_prev[3];
	end
	if (
		( sieteS0_expected_prev[4] !== 1'bx ) && ( sieteS0_prev[4] !== sieteS0_expected_prev[4] )
		&& ((sieteS0_expected_prev[4] !== last_sieteS0_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS0_expected_prev);
		$display ("     Real value = %b", sieteS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sieteS0_exp[4] = sieteS0_expected_prev[4];
	end
	if (
		( sieteS0_expected_prev[5] !== 1'bx ) && ( sieteS0_prev[5] !== sieteS0_expected_prev[5] )
		&& ((sieteS0_expected_prev[5] !== last_sieteS0_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS0_expected_prev);
		$display ("     Real value = %b", sieteS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sieteS0_exp[5] = sieteS0_expected_prev[5];
	end
	if (
		( sieteS0_expected_prev[6] !== 1'bx ) && ( sieteS0_prev[6] !== sieteS0_expected_prev[6] )
		&& ((sieteS0_expected_prev[6] !== last_sieteS0_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS0_expected_prev);
		$display ("     Real value = %b", sieteS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sieteS0_exp[6] = sieteS0_expected_prev[6];
	end
	if (
		( sieteS1_expected_prev[0] !== 1'bx ) && ( sieteS1_prev[0] !== sieteS1_expected_prev[0] )
		&& ((sieteS1_expected_prev[0] !== last_sieteS1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS1_expected_prev);
		$display ("     Real value = %b", sieteS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sieteS1_exp[0] = sieteS1_expected_prev[0];
	end
	if (
		( sieteS1_expected_prev[1] !== 1'bx ) && ( sieteS1_prev[1] !== sieteS1_expected_prev[1] )
		&& ((sieteS1_expected_prev[1] !== last_sieteS1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS1_expected_prev);
		$display ("     Real value = %b", sieteS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sieteS1_exp[1] = sieteS1_expected_prev[1];
	end
	if (
		( sieteS1_expected_prev[2] !== 1'bx ) && ( sieteS1_prev[2] !== sieteS1_expected_prev[2] )
		&& ((sieteS1_expected_prev[2] !== last_sieteS1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS1_expected_prev);
		$display ("     Real value = %b", sieteS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sieteS1_exp[2] = sieteS1_expected_prev[2];
	end
	if (
		( sieteS1_expected_prev[3] !== 1'bx ) && ( sieteS1_prev[3] !== sieteS1_expected_prev[3] )
		&& ((sieteS1_expected_prev[3] !== last_sieteS1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS1_expected_prev);
		$display ("     Real value = %b", sieteS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sieteS1_exp[3] = sieteS1_expected_prev[3];
	end
	if (
		( sieteS1_expected_prev[4] !== 1'bx ) && ( sieteS1_prev[4] !== sieteS1_expected_prev[4] )
		&& ((sieteS1_expected_prev[4] !== last_sieteS1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS1_expected_prev);
		$display ("     Real value = %b", sieteS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sieteS1_exp[4] = sieteS1_expected_prev[4];
	end
	if (
		( sieteS1_expected_prev[5] !== 1'bx ) && ( sieteS1_prev[5] !== sieteS1_expected_prev[5] )
		&& ((sieteS1_expected_prev[5] !== last_sieteS1_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS1_expected_prev);
		$display ("     Real value = %b", sieteS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sieteS1_exp[5] = sieteS1_expected_prev[5];
	end
	if (
		( sieteS1_expected_prev[6] !== 1'bx ) && ( sieteS1_prev[6] !== sieteS1_expected_prev[6] )
		&& ((sieteS1_expected_prev[6] !== last_sieteS1_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS1_expected_prev);
		$display ("     Real value = %b", sieteS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sieteS1_exp[6] = sieteS1_expected_prev[6];
	end
	if (
		( sieteS2_expected_prev[0] !== 1'bx ) && ( sieteS2_prev[0] !== sieteS2_expected_prev[0] )
		&& ((sieteS2_expected_prev[0] !== last_sieteS2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS2_expected_prev);
		$display ("     Real value = %b", sieteS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sieteS2_exp[0] = sieteS2_expected_prev[0];
	end
	if (
		( sieteS2_expected_prev[1] !== 1'bx ) && ( sieteS2_prev[1] !== sieteS2_expected_prev[1] )
		&& ((sieteS2_expected_prev[1] !== last_sieteS2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS2_expected_prev);
		$display ("     Real value = %b", sieteS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sieteS2_exp[1] = sieteS2_expected_prev[1];
	end
	if (
		( sieteS2_expected_prev[2] !== 1'bx ) && ( sieteS2_prev[2] !== sieteS2_expected_prev[2] )
		&& ((sieteS2_expected_prev[2] !== last_sieteS2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS2_expected_prev);
		$display ("     Real value = %b", sieteS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sieteS2_exp[2] = sieteS2_expected_prev[2];
	end
	if (
		( sieteS2_expected_prev[3] !== 1'bx ) && ( sieteS2_prev[3] !== sieteS2_expected_prev[3] )
		&& ((sieteS2_expected_prev[3] !== last_sieteS2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS2_expected_prev);
		$display ("     Real value = %b", sieteS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sieteS2_exp[3] = sieteS2_expected_prev[3];
	end
	if (
		( sieteS2_expected_prev[4] !== 1'bx ) && ( sieteS2_prev[4] !== sieteS2_expected_prev[4] )
		&& ((sieteS2_expected_prev[4] !== last_sieteS2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS2_expected_prev);
		$display ("     Real value = %b", sieteS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sieteS2_exp[4] = sieteS2_expected_prev[4];
	end
	if (
		( sieteS2_expected_prev[5] !== 1'bx ) && ( sieteS2_prev[5] !== sieteS2_expected_prev[5] )
		&& ((sieteS2_expected_prev[5] !== last_sieteS2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS2_expected_prev);
		$display ("     Real value = %b", sieteS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sieteS2_exp[5] = sieteS2_expected_prev[5];
	end
	if (
		( sieteS2_expected_prev[6] !== 1'bx ) && ( sieteS2_prev[6] !== sieteS2_expected_prev[6] )
		&& ((sieteS2_expected_prev[6] !== last_sieteS2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS2_expected_prev);
		$display ("     Real value = %b", sieteS2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sieteS2_exp[6] = sieteS2_expected_prev[6];
	end
	if (
		( sieteS3_expected_prev[0] !== 1'bx ) && ( sieteS3_prev[0] !== sieteS3_expected_prev[0] )
		&& ((sieteS3_expected_prev[0] !== last_sieteS3_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS3_expected_prev);
		$display ("     Real value = %b", sieteS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sieteS3_exp[0] = sieteS3_expected_prev[0];
	end
	if (
		( sieteS3_expected_prev[1] !== 1'bx ) && ( sieteS3_prev[1] !== sieteS3_expected_prev[1] )
		&& ((sieteS3_expected_prev[1] !== last_sieteS3_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS3_expected_prev);
		$display ("     Real value = %b", sieteS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sieteS3_exp[1] = sieteS3_expected_prev[1];
	end
	if (
		( sieteS3_expected_prev[2] !== 1'bx ) && ( sieteS3_prev[2] !== sieteS3_expected_prev[2] )
		&& ((sieteS3_expected_prev[2] !== last_sieteS3_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS3_expected_prev);
		$display ("     Real value = %b", sieteS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sieteS3_exp[2] = sieteS3_expected_prev[2];
	end
	if (
		( sieteS3_expected_prev[3] !== 1'bx ) && ( sieteS3_prev[3] !== sieteS3_expected_prev[3] )
		&& ((sieteS3_expected_prev[3] !== last_sieteS3_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS3_expected_prev);
		$display ("     Real value = %b", sieteS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sieteS3_exp[3] = sieteS3_expected_prev[3];
	end
	if (
		( sieteS3_expected_prev[4] !== 1'bx ) && ( sieteS3_prev[4] !== sieteS3_expected_prev[4] )
		&& ((sieteS3_expected_prev[4] !== last_sieteS3_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS3_expected_prev);
		$display ("     Real value = %b", sieteS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sieteS3_exp[4] = sieteS3_expected_prev[4];
	end
	if (
		( sieteS3_expected_prev[5] !== 1'bx ) && ( sieteS3_prev[5] !== sieteS3_expected_prev[5] )
		&& ((sieteS3_expected_prev[5] !== last_sieteS3_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS3_expected_prev);
		$display ("     Real value = %b", sieteS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sieteS3_exp[5] = sieteS3_expected_prev[5];
	end
	if (
		( sieteS3_expected_prev[6] !== 1'bx ) && ( sieteS3_prev[6] !== sieteS3_expected_prev[6] )
		&& ((sieteS3_expected_prev[6] !== last_sieteS3_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sieteS3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sieteS3_expected_prev);
		$display ("     Real value = %b", sieteS3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sieteS3_exp[6] = sieteS3_expected_prev[6];
	end
	if (
		( SIR_expected_prev[0] !== 1'bx ) && ( SIR_prev[0] !== SIR_expected_prev[0] )
		&& ((SIR_expected_prev[0] !== last_SIR_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[0] = SIR_expected_prev[0];
	end
	if (
		( SIR_expected_prev[1] !== 1'bx ) && ( SIR_prev[1] !== SIR_expected_prev[1] )
		&& ((SIR_expected_prev[1] !== last_SIR_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[1] = SIR_expected_prev[1];
	end
	if (
		( SIR_expected_prev[2] !== 1'bx ) && ( SIR_prev[2] !== SIR_expected_prev[2] )
		&& ((SIR_expected_prev[2] !== last_SIR_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[2] = SIR_expected_prev[2];
	end
	if (
		( SIR_expected_prev[3] !== 1'bx ) && ( SIR_prev[3] !== SIR_expected_prev[3] )
		&& ((SIR_expected_prev[3] !== last_SIR_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[3] = SIR_expected_prev[3];
	end
	if (
		( SIR_expected_prev[4] !== 1'bx ) && ( SIR_prev[4] !== SIR_expected_prev[4] )
		&& ((SIR_expected_prev[4] !== last_SIR_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[4] = SIR_expected_prev[4];
	end
	if (
		( SIR_expected_prev[5] !== 1'bx ) && ( SIR_prev[5] !== SIR_expected_prev[5] )
		&& ((SIR_expected_prev[5] !== last_SIR_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[5] = SIR_expected_prev[5];
	end
	if (
		( SIR_expected_prev[6] !== 1'bx ) && ( SIR_prev[6] !== SIR_expected_prev[6] )
		&& ((SIR_expected_prev[6] !== last_SIR_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[6] = SIR_expected_prev[6];
	end
	if (
		( SIR_expected_prev[7] !== 1'bx ) && ( SIR_prev[7] !== SIR_expected_prev[7] )
		&& ((SIR_expected_prev[7] !== last_SIR_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[7] = SIR_expected_prev[7];
	end
	if (
		( SIR_expected_prev[8] !== 1'bx ) && ( SIR_prev[8] !== SIR_expected_prev[8] )
		&& ((SIR_expected_prev[8] !== last_SIR_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[8] = SIR_expected_prev[8];
	end
	if (
		( SIR_expected_prev[9] !== 1'bx ) && ( SIR_prev[9] !== SIR_expected_prev[9] )
		&& ((SIR_expected_prev[9] !== last_SIR_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[9] = SIR_expected_prev[9];
	end
	if (
		( SIR_expected_prev[10] !== 1'bx ) && ( SIR_prev[10] !== SIR_expected_prev[10] )
		&& ((SIR_expected_prev[10] !== last_SIR_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[10] = SIR_expected_prev[10];
	end
	if (
		( SIR_expected_prev[11] !== 1'bx ) && ( SIR_prev[11] !== SIR_expected_prev[11] )
		&& ((SIR_expected_prev[11] !== last_SIR_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[11] = SIR_expected_prev[11];
	end
	if (
		( SIR_expected_prev[12] !== 1'bx ) && ( SIR_prev[12] !== SIR_expected_prev[12] )
		&& ((SIR_expected_prev[12] !== last_SIR_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[12] = SIR_expected_prev[12];
	end
	if (
		( SIR_expected_prev[13] !== 1'bx ) && ( SIR_prev[13] !== SIR_expected_prev[13] )
		&& ((SIR_expected_prev[13] !== last_SIR_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[13] = SIR_expected_prev[13];
	end
	if (
		( SIR_expected_prev[14] !== 1'bx ) && ( SIR_prev[14] !== SIR_expected_prev[14] )
		&& ((SIR_expected_prev[14] !== last_SIR_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[14] = SIR_expected_prev[14];
	end
	if (
		( SIR_expected_prev[15] !== 1'bx ) && ( SIR_prev[15] !== SIR_expected_prev[15] )
		&& ((SIR_expected_prev[15] !== last_SIR_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[15] = SIR_expected_prev[15];
	end
	if (
		( SIR_expected_prev[16] !== 1'bx ) && ( SIR_prev[16] !== SIR_expected_prev[16] )
		&& ((SIR_expected_prev[16] !== last_SIR_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[16] = SIR_expected_prev[16];
	end
	if (
		( SIR_expected_prev[17] !== 1'bx ) && ( SIR_prev[17] !== SIR_expected_prev[17] )
		&& ((SIR_expected_prev[17] !== last_SIR_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[17] = SIR_expected_prev[17];
	end
	if (
		( SIR_expected_prev[18] !== 1'bx ) && ( SIR_prev[18] !== SIR_expected_prev[18] )
		&& ((SIR_expected_prev[18] !== last_SIR_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[18] = SIR_expected_prev[18];
	end
	if (
		( SIR_expected_prev[19] !== 1'bx ) && ( SIR_prev[19] !== SIR_expected_prev[19] )
		&& ((SIR_expected_prev[19] !== last_SIR_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[19] = SIR_expected_prev[19];
	end
	if (
		( SIR_expected_prev[20] !== 1'bx ) && ( SIR_prev[20] !== SIR_expected_prev[20] )
		&& ((SIR_expected_prev[20] !== last_SIR_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[20] = SIR_expected_prev[20];
	end
	if (
		( SIR_expected_prev[21] !== 1'bx ) && ( SIR_prev[21] !== SIR_expected_prev[21] )
		&& ((SIR_expected_prev[21] !== last_SIR_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[21] = SIR_expected_prev[21];
	end
	if (
		( SIR_expected_prev[22] !== 1'bx ) && ( SIR_prev[22] !== SIR_expected_prev[22] )
		&& ((SIR_expected_prev[22] !== last_SIR_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[22] = SIR_expected_prev[22];
	end
	if (
		( SIR_expected_prev[23] !== 1'bx ) && ( SIR_prev[23] !== SIR_expected_prev[23] )
		&& ((SIR_expected_prev[23] !== last_SIR_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[23] = SIR_expected_prev[23];
	end
	if (
		( SIR_expected_prev[24] !== 1'bx ) && ( SIR_prev[24] !== SIR_expected_prev[24] )
		&& ((SIR_expected_prev[24] !== last_SIR_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIR_expected_prev);
		$display ("     Real value = %b", SIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SIR_exp[24] = SIR_expected_prev[24];
	end
	if (
		( SPCOUTT_expected_prev[0] !== 1'bx ) && ( SPCOUTT_prev[0] !== SPCOUTT_expected_prev[0] )
		&& ((SPCOUTT_expected_prev[0] !== last_SPCOUTT_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[0] = SPCOUTT_expected_prev[0];
	end
	if (
		( SPCOUTT_expected_prev[1] !== 1'bx ) && ( SPCOUTT_prev[1] !== SPCOUTT_expected_prev[1] )
		&& ((SPCOUTT_expected_prev[1] !== last_SPCOUTT_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[1] = SPCOUTT_expected_prev[1];
	end
	if (
		( SPCOUTT_expected_prev[2] !== 1'bx ) && ( SPCOUTT_prev[2] !== SPCOUTT_expected_prev[2] )
		&& ((SPCOUTT_expected_prev[2] !== last_SPCOUTT_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[2] = SPCOUTT_expected_prev[2];
	end
	if (
		( SPCOUTT_expected_prev[3] !== 1'bx ) && ( SPCOUTT_prev[3] !== SPCOUTT_expected_prev[3] )
		&& ((SPCOUTT_expected_prev[3] !== last_SPCOUTT_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[3] = SPCOUTT_expected_prev[3];
	end
	if (
		( SPCOUTT_expected_prev[4] !== 1'bx ) && ( SPCOUTT_prev[4] !== SPCOUTT_expected_prev[4] )
		&& ((SPCOUTT_expected_prev[4] !== last_SPCOUTT_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[4] = SPCOUTT_expected_prev[4];
	end
	if (
		( SPCOUTT_expected_prev[5] !== 1'bx ) && ( SPCOUTT_prev[5] !== SPCOUTT_expected_prev[5] )
		&& ((SPCOUTT_expected_prev[5] !== last_SPCOUTT_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[5] = SPCOUTT_expected_prev[5];
	end
	if (
		( SPCOUTT_expected_prev[6] !== 1'bx ) && ( SPCOUTT_prev[6] !== SPCOUTT_expected_prev[6] )
		&& ((SPCOUTT_expected_prev[6] !== last_SPCOUTT_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[6] = SPCOUTT_expected_prev[6];
	end
	if (
		( SPCOUTT_expected_prev[7] !== 1'bx ) && ( SPCOUTT_prev[7] !== SPCOUTT_expected_prev[7] )
		&& ((SPCOUTT_expected_prev[7] !== last_SPCOUTT_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[7] = SPCOUTT_expected_prev[7];
	end
	if (
		( SPCOUTT_expected_prev[8] !== 1'bx ) && ( SPCOUTT_prev[8] !== SPCOUTT_expected_prev[8] )
		&& ((SPCOUTT_expected_prev[8] !== last_SPCOUTT_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[8] = SPCOUTT_expected_prev[8];
	end
	if (
		( SPCOUTT_expected_prev[9] !== 1'bx ) && ( SPCOUTT_prev[9] !== SPCOUTT_expected_prev[9] )
		&& ((SPCOUTT_expected_prev[9] !== last_SPCOUTT_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[9] = SPCOUTT_expected_prev[9];
	end
	if (
		( SPCOUTT_expected_prev[10] !== 1'bx ) && ( SPCOUTT_prev[10] !== SPCOUTT_expected_prev[10] )
		&& ((SPCOUTT_expected_prev[10] !== last_SPCOUTT_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[10] = SPCOUTT_expected_prev[10];
	end
	if (
		( SPCOUTT_expected_prev[11] !== 1'bx ) && ( SPCOUTT_prev[11] !== SPCOUTT_expected_prev[11] )
		&& ((SPCOUTT_expected_prev[11] !== last_SPCOUTT_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[11] = SPCOUTT_expected_prev[11];
	end
	if (
		( SPCOUTT_expected_prev[12] !== 1'bx ) && ( SPCOUTT_prev[12] !== SPCOUTT_expected_prev[12] )
		&& ((SPCOUTT_expected_prev[12] !== last_SPCOUTT_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[12] = SPCOUTT_expected_prev[12];
	end
	if (
		( SPCOUTT_expected_prev[13] !== 1'bx ) && ( SPCOUTT_prev[13] !== SPCOUTT_expected_prev[13] )
		&& ((SPCOUTT_expected_prev[13] !== last_SPCOUTT_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[13] = SPCOUTT_expected_prev[13];
	end
	if (
		( SPCOUTT_expected_prev[14] !== 1'bx ) && ( SPCOUTT_prev[14] !== SPCOUTT_expected_prev[14] )
		&& ((SPCOUTT_expected_prev[14] !== last_SPCOUTT_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[14] = SPCOUTT_expected_prev[14];
	end
	if (
		( SPCOUTT_expected_prev[15] !== 1'bx ) && ( SPCOUTT_prev[15] !== SPCOUTT_expected_prev[15] )
		&& ((SPCOUTT_expected_prev[15] !== last_SPCOUTT_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[15] = SPCOUTT_expected_prev[15];
	end
	if (
		( SPCOUTT_expected_prev[16] !== 1'bx ) && ( SPCOUTT_prev[16] !== SPCOUTT_expected_prev[16] )
		&& ((SPCOUTT_expected_prev[16] !== last_SPCOUTT_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[16] = SPCOUTT_expected_prev[16];
	end
	if (
		( SPCOUTT_expected_prev[17] !== 1'bx ) && ( SPCOUTT_prev[17] !== SPCOUTT_expected_prev[17] )
		&& ((SPCOUTT_expected_prev[17] !== last_SPCOUTT_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[17] = SPCOUTT_expected_prev[17];
	end
	if (
		( SPCOUTT_expected_prev[18] !== 1'bx ) && ( SPCOUTT_prev[18] !== SPCOUTT_expected_prev[18] )
		&& ((SPCOUTT_expected_prev[18] !== last_SPCOUTT_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[18] = SPCOUTT_expected_prev[18];
	end
	if (
		( SPCOUTT_expected_prev[19] !== 1'bx ) && ( SPCOUTT_prev[19] !== SPCOUTT_expected_prev[19] )
		&& ((SPCOUTT_expected_prev[19] !== last_SPCOUTT_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[19] = SPCOUTT_expected_prev[19];
	end
	if (
		( SPCOUTT_expected_prev[20] !== 1'bx ) && ( SPCOUTT_prev[20] !== SPCOUTT_expected_prev[20] )
		&& ((SPCOUTT_expected_prev[20] !== last_SPCOUTT_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[20] = SPCOUTT_expected_prev[20];
	end
	if (
		( SPCOUTT_expected_prev[21] !== 1'bx ) && ( SPCOUTT_prev[21] !== SPCOUTT_expected_prev[21] )
		&& ((SPCOUTT_expected_prev[21] !== last_SPCOUTT_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[21] = SPCOUTT_expected_prev[21];
	end
	if (
		( SPCOUTT_expected_prev[22] !== 1'bx ) && ( SPCOUTT_prev[22] !== SPCOUTT_expected_prev[22] )
		&& ((SPCOUTT_expected_prev[22] !== last_SPCOUTT_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[22] = SPCOUTT_expected_prev[22];
	end
	if (
		( SPCOUTT_expected_prev[23] !== 1'bx ) && ( SPCOUTT_prev[23] !== SPCOUTT_expected_prev[23] )
		&& ((SPCOUTT_expected_prev[23] !== last_SPCOUTT_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[23] = SPCOUTT_expected_prev[23];
	end
	if (
		( SPCOUTT_expected_prev[24] !== 1'bx ) && ( SPCOUTT_prev[24] !== SPCOUTT_expected_prev[24] )
		&& ((SPCOUTT_expected_prev[24] !== last_SPCOUTT_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SPCOUTT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SPCOUTT_expected_prev);
		$display ("     Real value = %b", SPCOUTT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SPCOUTT_exp[24] = SPCOUTT_expected_prev[24];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DATAPATH_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg IControl;
reg IPushB0;
reg IPushB1;
reg IPushB2;
reg IRunOrWalk;
reg ISensor0;
reg ResetClock;
reg Switch0;
reg Switch1;
reg Switch2;
reg Switch3;
reg Switch4;
reg Switch5;
reg Switch6;
reg Switch7;
// wires                                               
wire [24:0] DIRMEMORIA;
wire [24:0] RegistroAA;
wire [24:0] RegistroBB;
wire [24:0] SalidaMUXMDR;
wire [6:0] sieteS0;
wire [6:0] sieteS1;
wire [6:0] sieteS2;
wire [6:0] sieteS3;
wire [24:0] SIR;
wire [24:0] SPCOUTT;

wire sampler;                             

// assign statements (if any)                          
DATAPATH i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.DIRMEMORIA(DIRMEMORIA),
	.IControl(IControl),
	.IPushB0(IPushB0),
	.IPushB1(IPushB1),
	.IPushB2(IPushB2),
	.IRunOrWalk(IRunOrWalk),
	.ISensor0(ISensor0),
	.RegistroAA(RegistroAA),
	.RegistroBB(RegistroBB),
	.ResetClock(ResetClock),
	.SalidaMUXMDR(SalidaMUXMDR),
	.sieteS0(sieteS0),
	.sieteS1(sieteS1),
	.sieteS2(sieteS2),
	.sieteS3(sieteS3),
	.SIR(SIR),
	.SPCOUTT(SPCOUTT),
	.Switch0(Switch0),
	.Switch1(Switch1),
	.Switch2(Switch2),
	.Switch3(Switch3),
	.Switch4(Switch4),
	.Switch5(Switch5),
	.Switch6(Switch6),
	.Switch7(Switch7)
);

// Clk
always
begin
	Clk = 1'b0;
	Clk = #20000 1'b1;
	#20000;
end 

// IControl
initial
begin
	IControl = 1'b0;
end 

// IPushB0
initial
begin
	IPushB0 = 1'b0;
end 

// IPushB1
initial
begin
	IPushB1 = 1'b0;
end 

// IPushB2
initial
begin
	IPushB2 = 1'b0;
end 

// IRunOrWalk
initial
begin
	IRunOrWalk = 1'b0;
end 

// ISensor0
initial
begin
	ISensor0 = 1'b0;
end 

// ResetClock
initial
begin
	ResetClock = 1'b0;
end 

// Switch0
initial
begin
	Switch0 = 1'b0;
end 

// Switch1
initial
begin
	Switch1 = 1'b0;
end 

// Switch2
initial
begin
	Switch2 = 1'b0;
end 

// Switch3
initial
begin
	Switch3 = 1'b0;
end 

// Switch4
initial
begin
	Switch4 = 1'b0;
end 

// Switch5
initial
begin
	Switch5 = 1'b0;
end 

// Switch6
initial
begin
	Switch6 = 1'b0;
end 

// Switch7
initial
begin
	Switch7 = 1'b0;
end 

DATAPATH_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.IControl(IControl),
	.IPushB0(IPushB0),
	.IPushB1(IPushB1),
	.IPushB2(IPushB2),
	.IRunOrWalk(IRunOrWalk),
	.ISensor0(ISensor0),
	.ResetClock(ResetClock),
	.Switch0(Switch0),
	.Switch1(Switch1),
	.Switch2(Switch2),
	.Switch3(Switch3),
	.Switch4(Switch4),
	.Switch5(Switch5),
	.Switch6(Switch6),
	.Switch7(Switch7),
	.sampler_tx(sampler)
);

DATAPATH_vlg_check_tst tb_out(
	.DIRMEMORIA(DIRMEMORIA),
	.RegistroAA(RegistroAA),
	.RegistroBB(RegistroBB),
	.SalidaMUXMDR(SalidaMUXMDR),
	.sieteS0(sieteS0),
	.sieteS1(sieteS1),
	.sieteS2(sieteS2),
	.sieteS3(sieteS3),
	.SIR(SIR),
	.SPCOUTT(SPCOUTT),
	.sampler_rx(sampler)
);
endmodule

